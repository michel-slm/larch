#!/usr/bin/python
# Copyright 2010  Lars Wirzenius
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Excercise my btree implementation, for simple benchmarking purposes.
# The benchmark gets a location and an operation count as command line
# arguments.
#
# If the location is the empty string, an in-memory node store is used.
# Otherwise it must be a non-existent directory name.
#
# The benchmark will do the given number of insertions into the tree, and
# measure the speed of that. Then it will look up each of those, and measure
# the lookups.


import os
import random
import shutil
import sys
import time

import btree


def measure(keys, func):
    start = time.clock()
    for key in keys:
        func(key)
    end = time.clock()
    return end - start


def main():
    location = sys.argv[1]
    n = int(sys.argv[2])

    key_size = 8
    value_size = 128
    node_size = 64*1024

    codec = btree.NodeCodec(key_size)

    if location == '':
        ns = btree.NodeStoreMemory(node_size, codec)
    else:
        if os.path.exists(location):
            raise Exception('%s exists already' % location)
        os.mkdir(location)
        ns = btree.NodeStoreDisk(location, node_size, codec)

    forest = btree.Forest(ns)
    tree = forest.new_tree()
    
    # Create list of keys.
    keys = ['%0*d' % (key_size, i) for i in xrange(n)]
    
    # Calibrate.
    looptime = measure(keys, lambda key: None)

    # Measure inserts.
    random.shuffle(keys)
    value = 'x' * value_size
    insert_time = measure(keys, lambda key: tree.insert(key, value)) - looptime

    # Measure lookups.
    random.shuffle(keys)
    lookup_time = measure(keys, lambda key: tree.lookup(key)) - looptime

    # Report
    print 'num_operations: %d' % n
    print 'insert: %.3f s (%.1f/s)' % (insert_time, n/insert_time)
    print 'lookup-time: %.3f s (%.1f/s)' % (lookup_time, n/lookup_time)

    # Clean up
    if location:
        shutil.rmtree(location)

if __name__ == '__main__':
    main()
