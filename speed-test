#!/usr/bin/python
# Copyright 2010  Lars Wirzenius
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Excercise my btree implementation, for simple benchmarking purposes.
# The benchmark gets a location and an operation count as command line
# arguments.
#
# If the location is the empty string, an in-memory node store is used.
# Otherwise it must be a non-existent directory name.
#
# The benchmark will do the given number of insertions into the tree, and
# measure the speed of that. Then it will look up each of those, and measure
# the lookups.


import cProfile
import os
import random
import shutil
import sys
import time

import btree


def measure(items, func, finalize, do_profile, profname):
    def helper():
        for item in items:
            func(item)
        finalize()

    start_time = time.time()
    start = time.clock()
    if do_profile:
        globaldict = globals().copy()
        localdict = locals().copy()
        cProfile.runctx('helper()', globaldict, localdict, 
                        '%s.prof' % profname)
    else:
        helper()
    end = time.clock()
    end_time = time.time()
    return end - start, end_time - start_time
        

def main():
    if True:
        import logging
        logging.basicConfig(filename='btree.log', level=logging.DEBUG)

    location = sys.argv[1]
    n = int(sys.argv[2])
    do_profile = True if sys.argv[3] == 'yes' else False

    key_size = 19
    value_size = 128
    node_size = 64*1024

    codec = btree.NodeCodec(key_size)

    if location == '':
        ns = btree.NodeStoreMemory(node_size, codec)
    else:
        if os.path.exists(location):
            raise Exception('%s exists already' % location)
        os.mkdir(location)
        ns = btree.NodeStoreDisk(location, node_size, codec)

    forest = btree.Forest(ns)
    tree = forest.new_tree()
    
    # Create list of keys.
    keys = ['%0*d' % (key_size, i) for i in xrange(n)]
    ranges = []
    range_len = 10
    for i in range(0, len(keys) - range_len):
        ranges.append((keys[i], keys[i+range_len-1]))
    
    # Helper functions.
    nop = lambda *args: None
    
    # Calibrate.
    looptime = measure(keys, nop, nop, do_profile, 'calibrate')

    # Measure inserts.
    random.shuffle(keys)
    value = 'x' * value_size
    insert = measure(keys, lambda key: tree.insert(key, value), 
                     forest.commit, do_profile, 'insert')
        
    # Measure lookups.
    random.shuffle(keys)
    lookup = measure(keys, tree.lookup, nop, do_profile, 'lookup')
        
    # Measure range lookups.
    random.shuffle(ranges)
    lookup_range = measure(ranges, lambda x: tree.lookup_range(x[0], x[1]),
                           nop, do_profile, 'lookup_range')

    # Measure inserts into existing tree.
    random.shuffle(keys)
    insert2 = measure(keys, lambda key: tree.insert(key, value),
                      forest.commit, do_profile, 'insert2')

    # Measure removes from tree.
    random.shuffle(keys)
    remove = measure(keys, tree.remove, forest.commit, do_profile, 'remove')

    # Measure remove_range. This requires building a new tree.
    keys.sort()
    for key in keys:
        tree.insert(key, value)
    random.shuffle(ranges)
    remove_range = measure(ranges, lambda x: tree.remove_range(x[0], x[1]),
                           forest.commit, do_profile, 'remove_range')

    # Report
    def speed(result, i):
        return n / (result[i] - looptime[i])
    def report(label, result):
        cpu, wall = result
        print '%-12s: %5.3f s (%8.1f/s) CPU; %5.3f s (%8.1f/s) wall clock' % \
            (label, cpu, speed(result, 0), wall, speed(result, 1))

    print 'num_operations: %d' % n
    report('insert', insert)
    report('lookup', lookup)
    report('lookup_range', lookup_range)
    report('insert2', insert2)
    report('remove', remove)
    report('remove_range', remove_range)
    if do_profile:
        print 'View *.prof with ./viewprof for profiling results.'

    # Clean up
    if location:
        shutil.rmtree(location)

if __name__ == '__main__':
    main()
